---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Ben.
--- DateTime: 2/5/2024 8:38 PM
---

ifs_freeform_main.Enter = function(this, bFwd)
    gIFShellScreenTemplate_fnEnter(this, bFwd)

    if bFwd then
        -- stop any playing movie
        ifelem_shellscreen_fnStopMovie()

        -- disable split screen
        this.wasSplit = ScriptCB_GetNumCameras()
        ScriptCB_SetSplitscreen(nil)

        -- enable metagame rules
        ScriptCB_SetGameRules("metagame")

        -- clear out saved screen
        this.curScreen = nil

        -- perform one-time init
        -- (does nothing if already loaded)
        this:OneTimeInit(true)

        ScriptCB_SetShellMusic("metagame_menu_music")

        -- set build screens to campaign mode
        ifs_freeform_purchase_unit:SetFreeformMode()
        ifs_freeform_purchase_tech:SetFreeformMode()

        -- if metagame state was saved...
        if ScriptCB_IsMetagameStateSaved() then
            -- set the active team
            print("DEBUG: in main 1, set active team")
            this:SetActiveTeam(this.playerTeam)
        else
            -- set initial state
            this:Start()

            -- get selected planet and fleet for each side
            this.lastSelected = {}
            this.lastFleet = {}
            for planet, team in pairs(this.planetFleet) do
                if team > 0 then
                    this.lastSelected[team] = planet
                    this.lastFleet[team] = planet
                end
            end
            for team, planet in pairs(this.planetBase) do
                if not this.lastSelected[team] then
                    this.lastSelected[team] = planet
                end
            end

            print("DEBUG: in main 2 setActiveTeam")
            -- set the active team to that of the starting controller
            this:SetActiveTeam(this.controllerTeam[this.startController])
            this.planetNext = this.lastSelected[this.playerTeam]

            -- clear state
            this.launchMission = nil
            this.activeBonus = {}
            this.recentPlanets = {}
            print("DEBUG: end of main enter")
        end

        -- if the last battle had a winner...
        local winner = ScriptCB_GetLastBattleVictory()

        --TODO team is not switching properly
        ---- ==================== NEW AUTORESOLVE CODE ===============
        print("DEBUG: winner is " .. tostring(winner) .. " auto resolve is " .. tostring(ifs_freeform_battle.useAutoResolve))
        if this.soakMode and ScriptCB_IsMetagameStateSaved() then
            print("DEBUG: is soakMode")
            winner = math.random(2)
        elseif ifs_freeform_battle.useAutoResolve ~= nil then
            ifs_freeform_battle.useAutoResolve = nil

            -- activate team bonuses
            -- player is simply the player during the turn, not always the human player
            local playerTeam = this.playerTeam
            local enemyTeam = 3 - playerTeam
            -- the basic weight vs the bonus weight and planet weight. The higher this is the less bonuses matter
            local startingWeight = 5
            local playerVictoryWeight = startingWeight
            local enemyVictoryWeight = startingWeight

            -- humans like to win
            local humanBonus = 2
            if ifs_freeform_main.teamController[playerTeam] then
                print("DEBUG: player is human")
                playerVictoryWeight = playerVictoryWeight + humanBonus
            end
            if ifs_freeform_main.teamController[enemyTeam] then
                print("DEBUG: enemy is human")
                enemyVictoryWeight = enemyVictoryWeight + humanBonus
            end

            print("DEBUG: main: auto resolved battle")

            --TODO use purchased units for bonuses ifs_purchase_unit_owned[this.main.playerTeam]
            --TODO detect whether its a space battle

            for team, bonus in pairs(this.activeBonus) do

                for index, tech in ifs_purchase_tech_table do
                    if tech.bonus == bonus then
                        for _, hint in ipairs(tech.hints) do
                            if string.find(ifs_freeform_main.launchMission, hint[1]) then
                                -- bonus card weights are found in ifs_purchase_tech_table_freeform in ifs_freeform_purchase_tech.lua
                                -- assigned to the above ifs_purchase_tech_table in SetFreeformMode in ifs_freeform_main.Enter
                                local bonusWeight = hint[2]
                                print("DEBUG: team " .. tostring(team) .. " bonus " .. tostring(bonus) .. " " .. tostring(bonusWeight))
                                if team == playerTeam then
                                    playerVictoryWeight = playerVictoryWeight + bonusWeight
                                else
                                    enemyVictoryWeight = enemyVictoryWeight + bonusWeight
                                end
                                break
                            end
                        end
                    end
                end
            end

            local planetBaseVictoryWeight = 5
            print("DEBUG: is player's base " .. tostring(this.planetBase[playerTeam] == this.planetNext))
            if this.planetBase[playerTeam] == this.planetNext then
                --planet is player's base
                playerVictoryWeight = playerVictoryWeight + planetBaseVictoryWeight
            end
            print("DEBUG: is enemy's base " .. tostring(this.planetBase[enemyTeam] == this.planetNext))
            if this.planetBase[enemyTeam] == this.planetNext then
                --planet is enemy's base
                enemyVictoryWeight = enemyVictoryWeight + planetBaseVictoryWeight
            end

            local totalWeight = playerVictoryWeight + enemyVictoryWeight
            local rand = math.random(1, totalWeight)

            print("DEBUG: playerTeam weight: " .. tostring(playerVictoryWeight) .. " enemyTeam weight " .. tostring(enemyVictoryWeight))
            print("DEBUG: total weight " .. tostring(totalWeight))
            print("DEBUG: choice is " .. tostring(rand))
            --determine the winner based on weighting
            if rand > playerVictoryWeight then
                winner = enemyTeam
                print("DEBUG: enemy wins")
            else
                winner = playerTeam
                print("DEBUG: player wins")
            end

        end
        ---- ================== END NEW CODE ===============
        if winner > 0 then
            -- apply battle results
            this:ApplyBattleResult(this.planetNext, winner)

            -- clear battle result
            ScriptCB_SetLastBattleVictoryValid(false)

            -- go to the result screen
            ScriptCB_PushScreen("ifs_freeform_result")

            -- trigger save request on next turn
            this.requestSave = true

            -- if setting up sides...
        elseif this.setupSides then

            -- go to the side setup screen
            ScriptCB_PushScreen("ifs_freeform_sides")

            -- otherwise...
        else

            -- go to the saved screen
            if this.curScreen == "summary_result" then
                ScriptCB_PushScreen("ifs_freeform_result")
                ScriptCB_PushScreen("ifs_freeform_summary")
            elseif this.curScreen == "summary_fleet" then
                ScriptCB_PushScreen("ifs_freeform_fleet")
                ScriptCB_PushScreen("ifs_freeform_summary")
            elseif this.curScreen == "result" then
                ScriptCB_PushScreen("ifs_freeform_result")
            elseif this.curScreen == "battle_card_2" then
                ifs_freeform_battle_card.defending = 1
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
                ScriptCB_PushScreen("ifs_freeform_battle_card")
            elseif this.curScreen == "battle_card_1" then
                print("DEBUG: in main, cur screen is battle_card_1")
                ifs_freeform_battle_card.defending = nil
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
                ScriptCB_PushScreen("ifs_freeform_battle_card")
            elseif this.curScreen == "battle_mode" then
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
            elseif this.curScreen == "battle_back" then
                ScriptCB_PushScreen("ifs_freeform_fleet")
                ScriptCB_PushScreen("ifs_freeform_battle")
            elseif this.curScreen == "battle_noback" then
                ScriptCB_PushScreen("ifs_freeform_battle")
                -- if the team has a human player...
            elseif this.joystick then
                -- go to the fleet screen
                ScriptCB_PushScreen("ifs_freeform_fleet")
            else
                -- go to ai move
                ScriptCB_PushScreen("ifs_freeform_ai")
            end

        end

        -- set up build screen
        ifs_purchase_build_screen()

        -- initialize ai state (HACK)
        ifs_freeform_ai:Init()

        --			-- create port entities (HACK)
        --			for planet, port in pairs(this.portPtr) do
        --				DeleteEntity(port)
        --			end
        --			this.portPtr = { }
        --			for planet, team in pairs(this.planetPort) do
        --				this.portPtr[planet] = CreateEntity(this.portClass[team], this.modelMatrix[planet][3])
        --			end

        -- create fleet entities (HACK)
        for team, list in pairs(this.fleetPtr) do
            for planet, fleet in pairs(list) do
                DeleteEntity(fleet)
            end
        end
        this.fleetPtr = { [1] = {}, [2] = {} }
        for planet, team in pairs(this.planetFleet) do
            if team == 0 then
                this.fleetPtr[1][planet] = CreateEntity(this.fleetClass[1], this.modelMatrix[planet][1])
                this.fleetPtr[2][planet] = CreateEntity(this.fleetClass[2], this.modelMatrix[planet][2])
            else
                this.fleetPtr[team][planet] = CreateEntity(this.fleetClass[team], this.modelMatrix[planet][team])
            end
        end

        -- select the initial planet
        this:SelectPlanet(nil, this.planetNext)

        -- set camera offset for each zoom level
        SetMapCameraOffset(0, 0, 200, 480)
        SetMapCameraPitch(0, -0.05)
        SetMapCameraOffset(1, 0, 100, 150)
        SetMapCameraPitch(1, -0.025)

        -- enable the 3D scene
        ScriptCB_EnableScene(true)
    end
end

ifs_freeform_main.SetActiveTeam = function(this, team)
    this.playerTeam = team
    this.playerSide = this.teamCode[team]
    this.otherSide = this.teamCode[3 - team]
    this.joystick = this.teamController[team]
    this.joystick_other = this.teamController[3 - team]
    print("DEBUG: team name " .. tostring(this.playerSide))
    ScriptCB_SetHotController((this.joystick or this.joystick_other or 0)+1)

    print("DEBUG: in main calling ifs_freeform_purchase_unit:SetActiveSide")
    print("DEBUG: current screen " .. tostring(ifs_freeform_main.curScreen))
    -- update dependent values
    ifs_freeform_purchase_unit:SetActiveSide()
    print("DEBUG: done with ifs_freeform_main.SetActiveTeam")
    local info = debug.getinfo(2)
    print("Message Severity: 0")
    if info then
        print(string.format("%s(%i)", info.short_src, info.currentline))
    end
end

screenStack = {}

gOriginalPushScreen = ScriptCB_PushScreen

local pushFirstMainScreen = false

ScriptCB_PushScreen = function(screen)
    --print("ScriptCB_PushScreen " .. tostring(screen))
    if screen then
        --clear things from before GC start
        if screen == "ifs_freeform_main" and not pushFirstMainScreen then
            pushFirstMainScreen = true
            print("DEBUG: BEGINNING GAME ============================")
            screenStack = {}
        end
        table.insert(screenStack, screen)
        tprint(screenStack)
        print("screen stack length " .. tostring(table.getn(screenStack)))
        if ifs_freeform_main then
            print("DEBUG: turn number is " .. tostring(ifs_freeform_main.turnNumber))
        end
        gOriginalPushScreen(screen)
    else
        print("ScriptCB_PushScreen: no screen provided. This should not happen?")
        gOriginalPushScreen()
    end
end

gOriginalPopScreen = ScriptCB_PopScreen

ScriptCB_PopScreen = function(screen)
    print("ScriptCB_PopScreen " .. tostring(screen))

    --print("ScriptCB_PopScreen: is screen in stack? " .. tostring(ScriptCB_IsScreenInStack(screen)))

    print("ScriptCB_PopScreen: popping last screen")
    table.remove(screenStack)
    tprint(screenStack)
    print("screen stack length " .. tostring(table.getn(screenStack)))
    gOriginalPopScreen(screen)
end

--37
--40
--37
--38
--38
--38
--38
--crashing on battle_card_1 which is attacking

--turn 10
--10
--10

--TODO VO says "defending" instead of "capturing" when player wins a battle
--TODO do not OneTimeInit after autoresolve

ifs_freeform_main.OneTimeInit = function(this, showLoadDisplay)
    -- restore any saved metagame state
    print("DEBUG: performing OneTimeInit ================")
    if ScriptCB_IsMetagameStateSaved() then
        print("DEBUG: loading state =================")
        this:LoadState()
    end


    if not this.planetDestination then

        -- set up memory pools (HACK)
        SetMemoryPoolSize("EntitySoundStream", 2)

        SetMemoryPoolSize("ParticleTransformer::PositionTr", 700)
        SetMemoryPoolSize("ParticleTransformer::SizeTransf", 751)
        SetMemoryPoolSize("ParticleTransformer::ColorTrans", 1176)

        SetMemoryPoolSize("ParticleEmitterObject", 16)
        SetMemoryPoolSize("ParticleEmitterInfoData", 128)
        SetMemoryPoolSize("ParticleEmitter", 128)

        -- show the load display
        if showLoadDisplay then
            -- stop any streaming
            ScriptCB_StopMovie()
            ScriptCB_CloseMovie()
            ScriptCB_SetShellMusic()

            -- do loading
            SetupTempHeap(2 * 1024 * 1024)
            ScriptCB_ShowLoadDisplay(true)
        end

        -- load sides
        ifs_purchase_load_data(this.teamCode[1], this.teamCode[2])

        -- read the galaxy map level
        ReadDataFile("gal\\gal1.lvl")

        -- read the galaxy map level
        ReadDataFile("sound\\gal.lvl;gal_vo")

        this.streamVoice = OpenAudioStream("sound\\gal.lvl",  "gal_vo_slow")
        this.streamMusic = OpenAudioStream("sound\\gal.lvl",  "gal_music")

        ScriptCB_PostLoadHack()

        -- hide the load display
        if showLoadDisplay then
            ScriptCB_ShowLoadDisplay(false)
            ClearTempHeap()
        end

        -- perform one-time setup
        this:Setup()

        -- create empty port array
        this.portPtr = { }

        -- create empty fleet array
        this.fleetPtr = { [1] = {}, [2] = {} }

        -- create planet, fleet, and port matrices
        this.planetMatrix = {}
        this.modelMatrix = {}
        for planet, _ in pairs(this.planetDestination) do
            local planetMatrix = GetEntityMatrix(planet)
            this.planetMatrix[planet] = {}
            this.planetMatrix[planet][0] = planetMatrix
            this.planetMatrix[planet][1] = CreateMatrix(-2.25, 0.0, 1.0, 0.0, 10.0, 4.0, -8.0, planetMatrix)
            this.planetMatrix[planet][2] = CreateMatrix(2.25, 0.0, 1.0, 0.0, -10.0, 4.0, -8.0, planetMatrix)
            this.planetMatrix[planet][3] = CreateMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 0.0, planetMatrix)
            this.modelMatrix[planet] = {}
            this.modelMatrix[planet][1] = GetEntityMatrix(planet .. "_fleet1") or this.planetMatrix[planet][1]
            this.modelMatrix[planet][2] = GetEntityMatrix(planet .. "_fleet2") or this.planetMatrix[planet][2]
        end

        -- show side setup screen?
        this.setupSides = (this.custom ~= nil)

        -- initialize team colors
        this:InitTeamColor()
    end
end

ifs_freeform_main.LoadState = function(this)
    local profileTeam
    local screen

    print("DEBUG: LOADING STATE ================================================================================")
    -- load values from saved state
    this.custom,
    this.scenario,
    profileTeam,		--this.controllerTeam,
    this.lastSelected,
    this.lastFleet,
    this.planetTeam,
    --		this.planetPort,
    this.planetFleet,
    this.planetNext,
    this.teamResources,
    ifs_purchase_unit_owned,
    ifs_purchase_tech_cards,
    ifs_purchase_tech_using,
    this.playerTeam,
    this.turnNumber,
    this.curScreen,
    ifs_freeform_fleet.turnNumber,
    ifs_freeform_fleet.planetStart,
    ifs_freeform_fleet.planetNext,
    this.launchMission,
    this.activeBonus,
    this.winnerTeam,
    this.fleetBattle,
    this.recentPlanets,
    this.planetResources,
    this.battleResources,
    this.soakMode
    = ScriptCB_LoadMetagameState()

    -- create a blank list if empty
    this.recentPlanets = this.recentPlanets or {}

    -- if loading a mission... (HACK)
    if ScriptCB_GetLastBattleVictory() < 0 then
        -- set mission name
        if this.launchMission then
            ScriptCB_SetMissionNames(this.launchMission, nil)
        end

        -- activate team bonuses
        for team, bonus in pairs(this.activeBonus) do
            ActivateBonus(team, bonus)
        end
    end

    -- start appropriate scenario
    local start = _G["ifs_freeform_start_" .. this.scenario]
    if start then
        start(this, this.custom)
    else
        assert("undefined scenario type \""..this.scenario.."\"")
    end

    -- discard the unused start function
    this.Start = nil

    -- restore profile teams
    local controllerTeam = {}
    for joystick, team in pairs(this.controllerTeam) do
        local name = ScriptCB_ununicode(ScriptCB_GetProfileName(joystick+1))
        local newteam = profileTeam[name]
        print (joystick, team, newteam, name)
        controllerTeam[joystick] = newteam or team
    end
    ifs_freeform_controllers(this, controllerTeam)
end

ifs_freeform_main.NextTurn = function(this)
    -- clear the screen stack
    ScriptCB_PopScreen("ifs_freeform_main")

    -- update metagame victory result
    if this.CheckVictory then
        this.teamVictory = this:CheckVictory()
    end

    -- on victory...
    if this.teamVictory then
        -- go to the end screen
        ScriptCB_PushScreen("ifs_freeform_end")
    else
        -- advance to the next turn
        this.turnNumber = this.turnNumber + 1

        -- switch teams
        this.lastSelected[this.playerTeam] = this.planetNext
        print("DEBUG: next turn, set active team")
        this:SetActiveTeam(3 - this.playerTeam)
        this:SelectPlanet(nil, this.lastSelected[this.playerTeam])

        -- clear state
        this.launchMission = nil
        this.activeBonus = {}

        -- if the team has a human player...
        if this.joystick then
            -- go to the fleet screen
            ScriptCB_PushScreen("ifs_freeform_fleet")
        else
            -- go to ai move
            ScriptCB_PushScreen("ifs_freeform_ai")
        end
    end
end

ifs_freeform_main.UpdatePlayerText = function(this, player)
    print("DEBUG: in ifs_freeform_main.UpdatePlayerText")
    if this.joystick then
        IFText_fnSetUString(player.name, ScriptCB_GetProfileName(this.joystick+1))
    else
        IFText_fnSetString(player.name, this.teamName[this.playerTeam])
    end
    IFText_fnSetUString(player.resources,
            ScriptCB_usprintf("ifs.freeform.credits", ScriptCB_tounicode(this:GetResources()))
    )
    IFImage_fnSetTexture(player.icon, "seal_" .. this.playerSide)
    local r, g, b = this:GetTeamColor(this.joystick and this.playerTeam or 3 - this.playerTeam)
    IFObj_fnSetColor(player.icon, r, g, b)
    IFObj_fnSetColor(player.name, r, g, b)
end