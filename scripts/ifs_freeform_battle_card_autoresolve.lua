---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Ben.
--- DateTime: 2/5/2024 8:10 PM
---

local ifs_freeform_battle_card_spacing = 6.0
local ifs_freeform_battle_card_x_offset = 0
local ifs_freeform_battle_card_y = 0
local ifs_freeform_battle_card_z = -25

ifs_battle_card_enter_sound = "mtg_%s_bonus_select_play"
ifs_battle_card_cannot_sound = "mtg_%s_bonus_cannot_play"
ifs_battle_card_play_us_sound = "mtg_%s_bonus_played_%s_us"
ifs_battle_card_play_them_sound = "mtg_%s_bonus_played_%s_them"

ifs_freeform_battle_card.Enter = function(this, bFwd)
    print("DEBUG: entered ifs_freeform_battle_card")
    gIFShellScreenTemplate_fnEnter(this, bFwd) -- call default enter function

    this.PrevButton = nil

    local team = ifs_freeform_main.playerTeam

    ifs_freeform_SetButtonVis( this, "back", nil )
    ifs_freeform_SetButtonVis( this, "help", nil )
    ifs_freeform_SetButtonName( this, "misc", "ifs.freeform.skipbonus")
    ifs_freeform_SetButtonVis( this, "misc", ifs_freeform_main.joystick )
    ifs_freeform_SetButtonName( this, "accept", "ifs.freeform.pickbonus")
    ifs_freeform_SetButtonVis( this, "accept", ifs_freeform_main.joystick )

    IFText_fnSetString(this.title.text, "ifs.freeform.usecard")

    -- map usable cards into slots
    this.useActive = { }
    local count = 0
    local active = nil
    for i, using in ipairs(ifs_purchase_tech_using[team]) do
        local item = this.useItems[i]
        item.slot = i
        item.using = using
        if using > 0 then
            local tech = ifs_purchase_tech_table[using]

            item.weight = 0
            for _, hint in ipairs(tech.hints) do
                if string.find(ifs_freeform_main.launchMission, hint[1]) then
                    item.weight = hint[2]
                    print(tech.name, item.weight)
                    break
                end
            end

            item.name = tech.name
            item.bonus = tech.bonus
            count = count + 1
            this.useActive[count] = item
            IFModel_fnSetMsh(item, tech.mesh)
            IFObj_fnSetVis(item, 1)

            if not active and item.weight > 0 then
                active = count
            end
        else
            IFObj_fnSetVis(item, nil)
        end
    end

    -- position the usable cards
    for i, item in pairs(this.useActive) do
        IFModel_fnSetTranslation(item,
                ifs_freeform_battle_card_x_offset + (i - count * 0.5 - 0.5) * ifs_freeform_battle_card_spacing,
                ifs_freeform_battle_card_y, ifs_freeform_battle_card_z)
        IFObj_fnSetAlpha(item, item.weight > 0 and 0.5 or 0.125)
    end
    this.selected = nil

    -- if any cards are available...
    if count > 0 then
        -- if this is a player...
        if ifs_freeform_main.joystick then
            -- select the first available card
            this:SetSelected(active)
            ifs_freeform_SetButtonVis( this, "accept", this.selected )
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_card_enter_sound, ifs_freeform_main.playerSide))
        else
            -- pick a card based on weight
            this.selected = nil
            local totalWeight = 2
            for i, item in ipairs(this.useActive) do
                totalWeight = totalWeight + item.weight
            end
            local randomWeight = math.random() * totalWeight
            print ("scaled weight:", totalWeight, randomWeight)
            for i, item in ipairs(this.useActive) do
                randomWeight = randomWeight - item.weight
                if randomWeight <= 0 then
                    this:SetSelected(i)
                    break
                end
            end

            ifelm_shellscreen_fnPlaySound(this.acceptSound)
            this:AcceptBonus()
        end
    else
        -- auto-skip
        this:Next()
        print("DEBUG: AFTER next function =============")
    end

    print("DEBUG: in battle card, update player text")
    ifs_freeform_main:UpdatePlayerText(this.player)

    this:UpdateAction()
end

ifs_freeform_battle_card.Next = function(this)
    --TODO the team switching is causing issues here on auto resolve
    if this.defending then
        -- switch to the attacker
        this.defending = nil
        print("DEBUG: in battle card, switching team to attacker" .. tostring(3 - ifs_freeform_main.playerTeam))
        ifs_freeform_main:SetActiveTeam(3 - ifs_freeform_main.playerTeam)
        print("DEBUG: finished switching teams")

        -- restore split screen
        ScriptCB_SetSplitscreen(ifs_freeform_main.wasSplit)

        print("DEBUG: saving state")
        -- save state
        ifs_freeform_main:SaveState()

        print("DEBUG: saving setup")
        -- save mission setup
        ifs_freeform_main:SaveMissionSetup()


        -- if in soak mode...
        if ifs_freeform_main.soakMode then
            -- enter the selected mission as a demo
            ScriptCB_LaunchDemo(ifs_freeform_main.launchMission)

        -- =============== NEW CASE ==================
        elseif ifs_freeform_battle.useAutoResolve then
            print("DEBUG: doing autoresolve -> last victory invalid")
            ScriptCB_SetLastBattleVictoryValid(false) -- there was no battle so invalidate it

            --TODO somehow the turns are breaking down
            -- TODO I can keep moving fleets after victory/defeat when I am not supposed to
            -- TODO something about the screen stack
            -- this.defending may not be right
            print("DEBUG: doing autoresolve -> main")
            ScriptCB_PushScreen("ifs_freeform_main")
        else
            -- enter the selected mission
            ScriptCB_EnterMission()
        end
    else
        print("DEBUG: in battle card, switching team to defender" .. tostring(3 - ifs_freeform_main.playerTeam))
        -- switch to the defender
        this.defending = true
        ifs_freeform_main:SetActiveTeam(3 - ifs_freeform_main.playerTeam)

        print("DEBUG: will it crash?")
        --TODO this is where it crashes sometimes
        -- re-enter as the defender
        ScriptCB_PushScreen("ifs_freeform_battle_card")
    end
end

ifs_freeform_battle_card.Exit = function(this, bFwd)
    print("DEBUG: in battle card exit function")
end